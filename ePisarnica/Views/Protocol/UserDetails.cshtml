@model ePisarnica.Models.ProtocolEntry
@{
    ViewData["Title"] = "Pregled protokola";
    var isAdmin = User.IsInRole("Admin");
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Pregled protokola</h2>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Nazad na listu
        </a>
    </div>

    <div class="card">
        <div class="card-header bg-light">
            <h5 class="card-title mb-0">Osnovne informacije</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="fw-bold">Broj protokola:</label>
                        <div class="form-control bg-light">@Model.BrojProtokola</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="fw-bold">Datum:</label>
                        <div class="form-control bg-light">@Model.Datum.ToString("dd.MM.yyyy HH:mm")</div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="fw-bold">Stranka:</label>
                        <div class="form-control bg-light">@Model.Stranka</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="fw-bold">Potpisano od strane:</label>
                        

                            @if(@Model.SignedByUser?.Username != null) {
                            <div class="form-control bg-light">
                                @Model.SignedByUser.Username
                            </div>
                            } else{
                                <div class="form-control bg-light">Nije potpisano još</div>
                            }
                            
                    </div>
                </div>
            </div>

            <!-- Status Display -->
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="fw-bold">Status dokumenta:</label>
                        <div class="form-control bg-light">
                            <span class="badge @GetStatusBadgeClass(Model.Document?.Status ?? DocumentStatus.Zaprimljeno)">
                                @GetStatusDisplayName(Model.Document?.Status ?? DocumentStatus.Zaprimljeno)
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label class="fw-bold">Status protokola:</label>
                        <div class="form-control bg-light">
                            @if (Model.IsSigned)
                            {
                                <span class="badge bg-success">
                                    <i class="bi bi-check-circle-fill"></i> Potpisan
                                </span>
                            }
                            else if (Model.IsNew)
                            {
                                <span class="badge bg-warning">
                                    <i class="bi bi-clock-history"></i> Na čekanju
                                </span>
                            }
                            else
                            {
                                <span class="badge bg-info">
                                    <i class="bi bi-eye-fill"></i> Pregledan
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label class="fw-bold">Napomena:</label>
                <textarea class="form-control bg-light" rows="3" readonly>@Model.Napomena</textarea>
            </div>
        </div>
    </div>

    @if (Model.Document != null)
    {
        <div class="card mt-3">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">Dokument</h5>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <i class="@GetFileIcon(Model.Document.FileExtension) @GetFileIconClass(Model.Document.FileExtension) me-2"></i>
                        <span>@Model.Document.FileName</span>
                        <small class="text-muted ms-2">(@FormatFileSize(Model.Document.FileSize))</small>
                    </div>
                    <div>
                    <a asp-controller="FileManager" asp-action="ViewFile" asp-route-id="@Model.Document.Id"
                       class="btn btn-outline-secondary btn-sm" target="_blank">
                        <i class="bi bi-eye"></i> Pregledaj
                    </a>
                    <a asp-controller="FileManager" asp-action="DownloadFile" asp-route-id="@Model.Document.Id"
                       class="btn btn-sm btn-outline-primary">
                        <i class="bi bi-download"></i> Preuzmi
                    </a>
                    </div>
                </div>

                <!-- Document Details -->
                <div class="row mt-3">
                    <div class="col-md-4">
                        <small class="text-muted">
                            <i class="bi bi-calendar"></i> Kreiran: @Model.Document.CreatedAt.ToString("dd.MM.yyyy HH:mm")
                        </small>
                    </div>
                    <div class="col-md-4">
                        <small class="text-muted">
                            <i class="bi bi-arrow-clockwise"></i> Ažuriran: @Model.Document.ModifiedAt.ToString("dd.MM.yyyy HH:mm")
                        </small>
                    </div>
                    <div class="col-md-4">
                        <small class="text-muted">
                            <i class="bi bi-filetype-@Model.Document.FileExtension.Replace(".", "")"></i>
                            Tip: @Model.Document.FileType
                        </small>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Model.IsSigned)
    {
        <div class="card mt-3 border-success">
            <div class="card-header bg-success text-white">
                <h5 class="card-title mb-0">
                    <i class="bi bi-check-circle-fill"></i> Potpisano
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="fw-bold">Potpisao:</label>
                            <div class="form-control bg-light">@Model.SignedByUser?.Username</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="fw-bold">Datum potpisa:</label>
                            <div class="form-control bg-light">@Model.SignedDate?.ToString("dd.MM.yyyy HH:mm")</div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="fw-bold">Status:</label>
                            <div class="form-control bg-light">
                                <span class="badge bg-success">Odobreno</span>
                            </div>
                        </div>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Model.SignatureNotes))
                {
                    <div class="mt-3">
                        <label class="fw-bold">Napomena potpisa:</label>
                        <textarea class="form-control bg-light" rows="2" readonly>@Model.SignatureNotes</textarea>
                    </div>
                }
            </div>
        </div>
    }
    else if (!Model.IsNew)
    {
        <div class="card mt-3 border-info">
            <div class="card-header bg-info text-white">
                <h5 class="card-title mb-0">
                    <i class="bi bi-eye-fill"></i> Pregledano
                </h5>
            </div>
            <div class="card-body">
                <p class="mb-0">
                    <i class="bi bi-info-circle"></i> Protokol je pregledan od strane administratora.
                    @if (Model.Document?.Status == DocumentStatus.NaDopuni)
                    {
                        <span class="text-warning fw-bold">Zahtijevaju se dopune.</span>
                    }
                    else if (Model.Document?.Status == DocumentStatus.Odbijeno)
                    {
                        <span class="text-danger fw-bold">Dokument je odbijen.</span>
                    }
                </p>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Disable right-click and text selection for read-only view
        document.addEventListener('contextmenu', function(e) {
            e.preventDefault();
        });

        document.addEventListener('selectstart', function(e) {
            e.preventDefault();
        });
    </script>
}

@functions {
    private string GetFileIcon(string extension)
    {
        return extension.ToLower() switch
        {
            ".pdf" => "bi-file-earmark-pdf",
            ".doc" or ".docx" => "bi-file-earmark-word",
            ".xls" or ".xlsx" => "bi-file-earmark-excel",
            ".ppt" or ".pptx" => "bi-file-earmark-ppt",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "bi-file-earmark-image",
            ".mp3" or ".wav" or ".ogg" => "bi-file-earmark-music",
            ".mp4" or ".mov" or ".avi" => "bi-file-earmark-play",
            ".zip" or ".rar" or ".7z" => "bi-file-earmark-zip",
            _ => "bi-file-earmark"
        };
    }

    private string GetFileIconClass(string extension)
    {
        return extension.ToLower() switch
        {
            ".pdf" => "text-danger",
            ".doc" or ".docx" => "text-primary",
            ".xls" or ".xlsx" => "text-success",
            ".ppt" or ".pptx" => "text-warning",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" => "text-info",
            ".mp3" or ".wav" or ".ogg" => "text-secondary",
            ".mp4" or ".mov" or ".avi" => "text-primary",
            ".zip" or ".rar" or ".7z" => "text-warning",
            _ => "text-secondary"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double len = bytes;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string GetStatusBadgeClass(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Zaprimljeno => "bg-info",
            DocumentStatus.Uvid => "bg-warning",
            DocumentStatus.UObradi => "bg-primary",
            DocumentStatus.NaDopuni => "bg-secondary",
            DocumentStatus.Recenzija => "bg-dark",
            DocumentStatus.Odobreno => "bg-success",
            DocumentStatus.Odbijeno => "bg-danger",
            DocumentStatus.Arhivirano => "bg-light text-dark",
            DocumentStatus.IsTrashed => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayName(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Zaprimljeno => "Zaprimljeno",
            DocumentStatus.Uvid => "Na uvidu",
            DocumentStatus.UObradi => "U obradi",
            DocumentStatus.NaDopuni => "Na dopuni",
            DocumentStatus.Recenzija => "Recenzija",
            DocumentStatus.Odobreno => "Odobreno",
            DocumentStatus.Odbijeno => "Odbijeno",
            DocumentStatus.Arhivirano => "Arhivirano",
            DocumentStatus.IsTrashed => "Obrisano",
            _ => status.ToString()
        };
    }
}